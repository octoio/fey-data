type entity_reference <ocaml from="Common"> = abstract
type hit_type <ocaml from="Common"> = abstract
type stat_type <ocaml from="Stat"> = abstract
type float_range <ocaml from="Common"> = abstract
type status_duration <ocaml from="Status"> = abstract

type character_team <cs namespace="Octoio.Fey.Data.Type"> = 
  [ Ally
  | Enemy
  | Neutral
  ]

type effect_target_mechanic_type <cs namespace="Octoio.Fey.Data.Type"> =
  [ Self
  | Team
  | Selected
  | Circle
  | Rectangle
  ]

type effect_target_mechanic <cs namespace="Octoio.Fey.Data.Dto" attributes="[Serializable]" imports="System;Octoio.Fey.Data.Type" modifiers="abstract,partial"> = {
  mechanic_type <json name="type">: effect_target_mechanic_type;
}

type effect_target_mechanic_self <cs extends="EffectTargetMechanic" namespace="Octoio.Fey.Data.Dto" attributes="[Serializable]" imports="System;Octoio.Fey.Data.Type" modifiers="partial"> = {
  mechanic_type <json name="type"> <cs ignore="true">: effect_target_mechanic_type;
}

type effect_target_mechanic_team <cs extends="EffectTargetMechanic" namespace="Octoio.Fey.Data.Dto" attributes="[Serializable]" imports="System;Octoio.Fey.Data.Type" modifiers="partial"> = {
  mechanic_type <json name="type"> <cs ignore="true">: effect_target_mechanic_type;
  team: character_team;
}

type effect_target_mechanic_selected <cs extends="EffectTargetMechanic" namespace="Octoio.Fey.Data.Dto" attributes="[Serializable]" imports="System;Octoio.Fey.Data.Type" modifiers="partial"> = {
  mechanic_type <json name="type"> <cs ignore="true">: effect_target_mechanic_type;
}

type effect_target_mechanic_circle <cs extends="EffectTargetMechanic" namespace="Octoio.Fey.Data.Dto" attributes="[Serializable]" imports="System;Octoio.Fey.Data.Type" modifiers="partial"> = {
  mechanic_type <json name="type"> <cs ignore="true">: effect_target_mechanic_type;
  hit_count: int <ocaml valid="Validation.int_min 1">;
  radius: float;
}

type effect_target_mechanic_rectangle <cs extends="EffectTargetMechanic" namespace="Octoio.Fey.Data.Dto" attributes="[Serializable]" imports="System;Octoio.Fey.Data.Type" modifiers="partial"> = {
  mechanic_type <json name="type"> <cs ignore="true">: effect_target_mechanic_type;
  hit_count: int <ocaml valid="Validation.int_min 1">;
  width: float;
  height: float;
}

type effect_target_mechanic_internal <cs generators="visitor(namespace=Octoio.Fey.Data.Dto,nameprefix=EffectTargetMechanic),converter(namespace=Octoio.Fey.Data.Mapper,nameprefix=EffectTargetMechanic,enumname=EffectTargetMechanicType)"> =
  [ Self of effect_target_mechanic_self
  | Team of effect_target_mechanic_team
  | Selected of effect_target_mechanic_selected
  | Circle of effect_target_mechanic_circle
  | Rectangle of effect_target_mechanic_rectangle
  ] <json adapter.ocaml="Atdgen_runtime.Json_adapter.Type_field">

type effect_target <cs namespace="Octoio.Fey.Data.Type"> = 
  [ Ally
  | Enemy
  | Any
  ]

type effect_scaling <cs namespace="Octoio.Fey.Data.Dto" attributes="[Serializable]" imports="System"> = {
  base: float;
  scaling: float_range;
  stat <cs usetype="Type.Stat">: stat_type;
}

type hit_effect <cs namespace="Octoio.Fey.Data.Dto" imports="System;Octoio.Fey.Data.Type"> = {
  hit_type <cs usetype="Type.Hit">: hit_type;
  scalers: effect_scaling list;
  target_mechanic <cs usetype="EffectTargetMechanic">: effect_target_mechanic_internal;
  target: effect_target;
  hit_sound: entity_reference;
  can_crit: bool;
  can_miss: bool;
} 

type status_effect <cs namespace="Octoio.Fey.Data.Dto" imports="System;Octoio.Fey.Data.Type"> = {
  target_mechanic <cs usetype="EffectTargetMechanic">: effect_target_mechanic_internal;
  target: effect_target;
  durations: status_duration list;
  scalers: effect_scaling list;
  status: entity_reference <ocaml valid="Validation.entity_reference_of_type `Status">;
}
